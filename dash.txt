Project Path: Projet_Dash

Source Tree:

```
Projet_Dash
├── app.py
├── data
│   ├── annotations.json
│   ├── cars
│   │   ├── 208.jpg
│   │   ├── car425.jpg
│   │   ├── car426.jpg
│   │   ├── car427.jpg
│   │   ├── car428.jpg
│   │   ├── car429.jpg
│   │   ├── car430.jpg
│   │   ├── car431.jpg
│   │   ├── car432.jpg
│   │   ├── car433.jpg
│   │   ├── car434.jpg
│   │   ├── car435.jpg
│   │   ├── car436.jpg
│   │   ├── flashmcqueen.jpeg
│   │   ├── mazdacx3.jpg
│   │   ├── porsche 911-gt3rs.jpeg
│   │   └── toyota-yaris.jpg
│   ├── data_fictive.csv
│   └── users.json
├── pages
│   ├── accueil.py
│   ├── annotation.py
│   ├── annoter.py
│   ├── apropos.py
│   ├── login.py
│   ├── stats.py
│   ├── verifier.py
│   └── __pycache__
│       ├── accueil.cpython-311.pyc
│       ├── accueil.cpython-312.pyc
│       ├── annotation.cpython-311.pyc
│       ├── annotation.cpython-312.pyc
│       ├── annoter.cpython-311.pyc
│       ├── annoter.cpython-312.pyc
│       ├── apropos.cpython-311.pyc
│       ├── apropos.cpython-312.pyc
│       ├── contexte.cpython-312.pyc
│       ├── login.cpython-311.pyc
│       ├── login.cpython-312.pyc
│       ├── stats.cpython-311.pyc
│       ├── stats.cpython-312.pyc
│       ├── truc.cpython-312.pyc
│       ├── verifier.cpython-311.pyc
│       └── verify.cpython-311.pyc
└── requirements.txt

```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\app.py`:

```py
import dash
from dash import dcc, html, callback, Input, Output
import dash_bootstrap_components as dbc

app = dash.Dash(__name__, use_pages=True, external_stylesheets=[
    dbc.themes.BOOTSTRAP, 
    "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css",
    "https://fonts.googleapis.com/css2?family=Roboto&display=swap",
    ])

app.layout = html.Div([
    dcc.Location(id='url', refresh=True),
    dbc.NavbarSimple(
        children=[
            dbc.NavLink('Accueil', href='/accueil'),
            dbc.NavLink('À propos', href='/apropos'),
            dbc.NavLink('Interface d\'annotation', href='/annoter'),
            dbc.NavLink('Liste des annotations', href='/annotation'),
            dbc.NavLink('Statistiques', href='/stats'),
            html.Span(id='user_status', className='text-light align-self-center', style={'font-size': '0.9rem', 'marginLeft': '100px', 'marginRight':'20px'}),
            dbc.Button('Déconnexion', color='danger', outline=True, className='text-light align-self-center', style={'font-size': '0.8rem'}, id='logout_button', n_clicks=0),
        ],
        brand="Groupe Dash McQueen",
        color="#333333",
        dark=True,
        id='navbar',
    ),
    dash.page_container,
    dcc.Store(id='user_name_store', storage_type='local')  # Pour stocker le nom d'utilisateur en cours sur la session
])

@callback(
    Output('user_status', 'children', allow_duplicate=True),
    Input('user_name_store', 'data'),
    prevent_initial_call='True'
)

def afficher_message_loggé(user_name):
    if user_name:
        return f"Vous êtes loggé en tant que {user_name}."
    return "Vous n'êtes pas loggé."

@callback(
    Output('navbar', 'style'),
    Input('url', 'pathname'),
)

def toggle_navbar(pathname):
    # On masque la navbar sur la page de login
    if pathname == '/':
        return {'display': 'none'}
    return {'display': 'block'}

@callback(
    Output('url', 'href', allow_duplicate=True),
    Input('logout_button', 'n_clicks'),
    prevent_initial_call=True
)

def handle_logout(n_clicks):
    if n_clicks > 0:
        return '/'  # Redirection vers la page de connexion
    return dash.no_update

if __name__ == '__main__':
    app.run(debug=True)
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\data\annotations.json`:

```json
[
  {
    "id": 1,
    "nom_image": "car436.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "Ma\u00ebl",
    "date_review": "2024-10-06",
    "marque": "Dacia",
    "couleur": "Bleu",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 55.42578814106604,
        "y0": 120.60534274193549,
        "x1": 422.3644978184855,
        "y1": 284.43437500000005
      }
    ]
  },
  {
    "id": 2,
    "nom_image": "car430.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Noir",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 66.26774193548387,
        "y0": 149.7592741935484,
        "x1": 389.40322580645164,
        "y1": 263.9270161290322
      }
    ]
  },
  {
    "id": 3,
    "nom_image": "toyota-yaris.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Toyota",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 318.43552915511583,
        "y0": 457.8659274193548,
        "x1": 1512.2742388325348,
        "y1": 1110.4465725806451
      }
    ]
  },
  {
    "id": 4,
    "nom_image": "car427.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 84.19356807585687,
        "y0": 153.41683467741936,
        "x1": 411.709697108115,
        "y1": 302.2878024193548
      }
    ]
  },
  {
    "id": 5,
    "nom_image": "car431.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mercedes",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 23.561288550592234,
        "y0": 153.68840725806453,
        "x1": 457.4096756473664,
        "y1": 339.29808467741935
      }
    ]
  },
  {
    "id": 6,
    "nom_image": "mazdacx3.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mazda",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 143.24845246345765,
        "y0": 327.8695564516129,
        "x1": 1077.1452266570059,
        "y1": 806.7147177419354
      }
    ]
  },
  {
    "id": 7,
    "nom_image": "car429.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "Ma\u00ebl",
    "date_review": "2024-10-06",
    "marque": "Autre",
    "couleur": "Noir",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 398.57741935483875,
        "y0": 108.98508064516129,
        "x1": 146.7967741935484,
        "y1": 223.15282258064516
      }
    ]
  },
  {
    "id": 8,
    "nom_image": "car433.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 432.99677025579626,
        "y0": 53.90665322580645,
        "x1": 15.977415417086688,
        "y1": 234.95826612903224
      }
    ]
  },
  {
    "id": 9,
    "nom_image": "car426.jpg",
    "annotateur": "Vadim",
    "date_annotation": "2024-10-06",
    "reviewer": "Ma\u00ebl",
    "date_review": "2024-10-06",
    "marque": "BMW",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 392.4612903225807,
        "y0": 98.7915322580645,
        "x1": 74.42258064516129,
        "y1": 229.26895161290324
      }
    ]
  },
  {
    "id": 10,
    "nom_image": "car427.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Dacia",
    "couleur": "Bleu",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 58.29998168945314,
        "y0": 128.26985887096777,
        "x1": 420.44836878622743,
        "y1": 284.43437500000005
      }
    ]
  },
  {
    "id": 11,
    "nom_image": "car431.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "BMW",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 458.5483853247857,
        "y0": 162.79808467741935,
        "x1": 40.64193371188256,
        "y1": 334.7432459677419
      }
    ]
  },
  {
    "id": 12,
    "nom_image": "car426.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "BMW",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 66.26774193548387,
        "y0": 97.77217741935483,
        "x1": 394.5,
        "y1": 235.3850806451613
      }
    ]
  },
  {
    "id": 13,
    "nom_image": "car429.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Noir",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 394.5,
        "y0": 103.8883064516129,
        "x1": 151.8935483870968,
        "y1": 227.2302419354839
      }
    ]
  },
  {
    "id": 14,
    "nom_image": "car433.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Ford",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 440.7193509009575,
        "y0": 45.32600806451613,
        "x1": 20.26773799773185,
        "y1": 248.68729838709677
      }
    ]
  },
  {
    "id": 15,
    "nom_image": "porsche 911-gt3rs.jpeg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Porsche",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 23.699996062247976,
        "y0": 56.48084677419354,
        "x1": 433.8548347719253,
        "y1": 232.38407258064515
      }
    ]
  },
  {
    "id": 16,
    "nom_image": "flashmcqueen.jpeg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 48.84191028225807,
        "y0": 109.88064516129033,
        "x1": 966.7257812500002,
        "y1": 466.6290322580645
      }
    ]
  },
  {
    "id": 17,
    "nom_image": "car430.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Peugeot",
    "couleur": "Noir",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 97.86774193548388,
        "y0": 137.52701612903226,
        "x1": 385.32580645161295,
        "y1": 271.0625
      }
    ]
  },
  {
    "id": 18,
    "nom_image": "car431.jpg",
    "annotateur": "Thibault",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mercedes",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 31.53225629252772,
        "y0": 150.27227822580647,
        "x1": 457.4096756473664,
        "y1": 342.7142137096774
      }
    ]
  },
  {
    "id": 19,
    "nom_image": "car428.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Dacia",
    "couleur": "Bleu",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 67.88062685074347,
        "y0": 114.85695564516129,
        "x1": 417.57417523784034,
        "y1": 283.47631048387103
      }
    ]
  },
  {
    "id": 20,
    "nom_image": "car425.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 41.82260033392138,
        "y0": 90.43296370967742,
        "x1": 351.01614872101817,
        "y1": 340.078125
      }
    ]
  },
  {
    "id": 21,
    "nom_image": "car436.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mercedes",
    "couleur": "Vert",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 70.75482039913057,
        "y0": 136.89243951612906,
        "x1": 418.5322397539694,
        "y1": 286.35050403225813
      }
    ]
  },
  {
    "id": 22,
    "nom_image": "208.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Peugeot",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 224.12577613092242,
        "y0": 173.85332661290323,
        "x1": 696.9483567760839,
        "y1": 452.38881048387105
      }
    ]
  },
  {
    "id": 23,
    "nom_image": "toyota-yaris.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Toyota",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 326.11294850995455,
        "y0": 473.2207661290322,
        "x1": 1481.5645614131802,
        "y1": 1125.8014112903224
      }
    ]
  },
  {
    "id": 24,
    "nom_image": "car435.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Citroen",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 92.66774626701107,
        "y0": 135.6405241935484,
        "x1": 216.24193981539818,
        "y1": 249.08568548387098
      }
    ]
  },
  {
    "id": 25,
    "nom_image": "mazdacx3.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mazda",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 146.22264601184474,
        "y0": 327.8695564516129,
        "x1": 1074.171033108619,
        "y1": 812.6631048387096
      }
    ]
  },
  {
    "id": 26,
    "nom_image": "car427.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mercedes",
    "couleur": "Noir",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 89.91937452746978,
        "y0": 136.23941532258067,
        "x1": 411.709697108115,
        "y1": 306.8684475806451
      }
    ]
  },
  {
    "id": 27,
    "nom_image": "car431.jpg",
    "annotateur": "Manon",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mercedes",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 40.64193371188256,
        "y0": 144.57872983870968,
        "x1": 459.68709500220507,
        "y1": 344.9916330645161
      }
    ]
  },
  {
    "id": 28,
    "nom_image": "porsche 911-gt3rs.jpeg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Dacia",
    "couleur": "Bleu",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 59.258046205582176,
        "y0": 111.02469758064517,
        "x1": 422.3644978184855,
        "y1": 278.68598790322585
      }
    ]
  },
  {
    "id": 29,
    "nom_image": "car435.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Citroen",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 94.69355271862398,
        "y0": 134.62762096774193,
        "x1": 223.33226239604332,
        "y1": 246.04697580645163
      }
    ]
  },
  {
    "id": 30,
    "nom_image": "car425.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 59.0000196887601,
        "y0": 108.75554435483872,
        "x1": 353.30647130166335,
        "y1": 324.04586693548384
      }
    ]
  },
  {
    "id": 31,
    "nom_image": "car427.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 80.75808420488913,
        "y0": 120.20715725806453,
        "x1": 428.88711646295366,
        "y1": 301.14264112903226
      }
    ]
  },
  {
    "id": 32,
    "nom_image": "car428.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Porsche",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 21.983867029989913,
        "y0": 146.57762096774192,
        "x1": 197.02902832031245,
        "y1": 241.8227822580645
      }
    ]
  },
  {
    "id": 33,
    "nom_image": "car432.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 15.55483870967742,
        "y0": 79.32026209677419,
        "x1": 436.0387096774194,
        "y1": 221.5202620967742
      }
    ]
  },
  {
    "id": 34,
    "nom_image": "car429.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Noir",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 174.3193548387097,
        "y0": 83.50120967741935,
        "x1": 395.5193548387097,
        "y1": 228.24959677419355
      }
    ]
  },
  {
    "id": 35,
    "nom_image": "car433.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 17.693544449344753,
        "y0": 44.4679435483871,
        "x1": 434.7128992880543,
        "y1": 234.10020161290322
      }
    ]
  },
  {
    "id": 36,
    "nom_image": "car425.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 42.96776162424396,
        "y0": 111.04586693548389,
        "x1": 349.8709874306956,
        "y1": 335.4974798387097
      }
    ]
  },
  {
    "id": 37,
    "nom_image": "car426.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "BMW",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 54.035483870967745,
        "y0": 78.40443548387097,
        "x1": 395.5193548387097,
        "y1": 235.3850806451613
      }
    ]
  },
  {
    "id": 38,
    "nom_image": "car432.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 33.903225806451616,
        "y0": 86.96542338709678,
        "x1": 434.50967741935483,
        "y1": 219.22671370967743
      }
    ]
  },
  {
    "id": 39,
    "nom_image": "car434.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Mazda",
    "couleur": "Gris",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 11.73225806451613,
        "y0": 64.02993951612903,
        "x1": 448.27096774193546,
        "y1": 213.87510080645163
      }
    ]
  },
  {
    "id": 40,
    "nom_image": "car432.jpg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Volkswagen",
    "couleur": "Blanc",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 34.66774193548387,
        "y0": 79.32026209677419,
        "x1": 429.15806451612906,
        "y1": 225.3428427419355
      }
    ]
  },
  {
    "id": 41,
    "nom_image": "flashmcqueen.jpeg",
    "annotateur": "Ma\u00ebl",
    "date_annotation": "2024-10-06",
    "reviewer": "",
    "date_review": "",
    "marque": "Autre",
    "couleur": "Rouge",
    "annotations": [
      {
        "editable": true,
        "visible": true,
        "showlegend": false,
        "legend": "legend",
        "legendgroup": "",
        "legendgrouptitle": {
          "text": "",
          "font": {
            "weight": "normal",
            "style": "normal",
            "variant": "normal",
            "lineposition": "none",
            "textcase": "normal",
            "shadow": "none"
          }
        },
        "legendrank": 1000,
        "label": {
          "text": "",
          "texttemplate": ""
        },
        "xref": "x",
        "yref": "y",
        "layer": "above",
        "opacity": 0.3,
        "line": {
          "color": "black",
          "width": 2,
          "dash": "solid"
        },
        "fillcolor": "cyan",
        "fillrule": "evenodd",
        "type": "rect",
        "x0": 39.55158770161291,
        "y0": 137.7516129032258,
        "x1": 970.4419102822582,
        "y1": 474.06129032258065
      }
    ]
  }
]
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\data\data_fictive.csv`:

```csv
idAnno;TimeStamp;User;idImg;Trace;Couleur;Marque;Reviewer
id1;28/09/2024 09:00;Thibault;car429.jpg;;Rouge;Mercedes;Maël
id2;29/09/2024 10:00;Vadim;car436.jpg;;Noir;Aston Martin;Thibault
id3;30/09/2024 11:00;Mael;car428.jpg;;Bleu;Kia;
id4;01/10/2024 12:00;Manon;car430.jpg;;Gris;Renault;Thibault
id5;02/10/2024 13:00;Thibault;car428.jpg;;Bleu;Mercedes;Vadim
id6;03/10/2024 14:00;Vadim;car435.jpg;;Rouge;Aston Martin;Thibault
id7;04/10/2024 15:00;Mael;car425.jpg;;Noir;Kia;
id8;05/10/2024 16:00;Manon;car430.jpg;;Bleu;Renault;Vadim
id9;06/10/2024 17:00;Thibault;car433.jpg;;Gris;Mercedes;Manon
id10;07/10/2024 18:00;Vadim;car425.jpg;;Bleu;Aston Martin;Manon
id11;08/10/2024 19:00;Mael;car429.jpg;;Rouge;Kia;Vadim
id12;09/10/2024 20:00;Manon;car429.jpg;;Noir;Renault;Mael
id13;10/10/2024 21:00;Thibault;car428.jpg;;Bleu;Mercedes;Thibault
id14;11/10/2024 22:00;Vadim;car429.jpg;;Gris;Aston Martin;
id15;12/10/2024 23:00;Mael;car428.jpg;;Bleu;Kia;Manon
id16;14/10/2024 00:00;Manon;car429.jpg;;Rouge;Renault;
id17;15/10/2024 01:00;Thibault;car432.jpg;;Noir;Mercedes;Vadim
id18;16/10/2024 02:00;Vadim;car431.jpg;;Bleu;Aston Martin;Manon
id19;17/10/2024 03:00;Mael;car431.jpg;;Gris;Kia;
id20;18/10/2024 04:00;Manon;car428.jpg;;Bleu;Renault;Thibault
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\data\users.json`:

```json
[
    {
        "id": 1,
        "name": "Thibault"
    },
    {
        "id": 2,
        "name": "Vadim"
    },
    {
        "id": 3,
        "name": "Manon"
    },
    {
        "id": 4,
        "name": "Ma\u00ebl"
    }
]
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\accueil.py`:

```py
from dash import html, dcc
import dash
import dash_bootstrap_components as dbc

# Enregistrer la page dans le registre avec le décorateur
dash.register_page(__name__, path='/accueil', name='Accueil', order=1)

layout = html.Div(
    style={'margin': '20px'},
    children=[
        html.H1("Bienvenue dans notre application d'annotation", style={'text-align': 'center', 'margin-bottom': '40px'}),
        html.H2("Que souhaitez-vous faire ?", style={'text-align': 'center', 'margin-bottom': '40px'}),
        dbc.Row(
            [
                dbc.Col(
                    dbc.Button(
                        [html.I(className="bi bi-pencil-square me-2"), "Annoter"],
                        href="/annoter",
                        color="primary",
                        className="btn-lg",
                        style={
                            'width': '200px', 'height': '200px', 'font-size': '24px',
                            'display': 'flex', 'align-items': 'center', 'justify-content': 'center',
                            'text-align': 'center'
                        }
                    ),
                    width="auto"
                ),
                dbc.Col(
                    dbc.Button(
                        [html.I(className="bi bi-check-circle me-2"), "Valider"],
                        href="/liste",
                        color="success",
                        className="btn-lg",
                        style={
                            'width': '200px', 'height': '200px', 'font-size': '24px',
                            'display': 'flex', 'align-items': 'center', 'justify-content': 'center',
                            'text-align': 'center'
                        }
                    ),
                    width="auto"
                ),
                dbc.Col(
                    dbc.Button(
                        [html.I(className="bi bi-bar-chart-line me-2"), "Mesurer"],
                        href="/stats",
                        color="danger",
                        className="btn-lg",
                        style={
                            'width': '200px', 'height': '200px', 'font-size': '24px',
                            'display': 'flex', 'align-items': 'center', 'justify-content': 'center',
                            'text-align': 'center',
                            'background-color': '#800000',  # Bordeaux
                            'border-color': '#800000'
                        }
                    ),
                    width="auto"
                ),
            ],
            justify="center",
        ),
        dbc.Row(
            dbc.Col(
                html.Footer(
                    dcc.Markdown(
                        """
                        **© 2024 Projet d'annotation - Dash**

                        Contributeurs du projet : Thibault DAGUIN, Vadim MARTIN, Maël CHAINE, Manon BONNAUD-DUBOIS
                        """
                    ),
                    className="text-center mt-5"
                )
            )
        )
    ]
)
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\annotation.py`:

```py
import dash
from dash import html, dcc, dash_table, Input, Output, State
import json
import os
from datetime import datetime

dash.register_page(__name__)

annotations_file = './data/annotations.json'

def load_annotations():
    """Charger les annotations à partir du fichier JSON."""
    if os.path.exists(annotations_file):
        with open(annotations_file, 'r') as f:
            return json.load(f)
    return []

def prepare_table_data():
    """Préparer les données pour le DataTable à partir des annotations."""
    annotations = load_annotations()
    table_data = []
    
    for annotation in annotations:
        table_data.append({
            'Image Name': annotation.get('nom_image', 'N/A'),
            'Date': annotation.get('date_annotation', 'N/A'),
            'Annotateur': annotation.get('annotateur', 'Anonyme'),
            'Reviewer': annotation.get('reviewer', 'N/A'),
            'Review Date': annotation.get('date_review', 'N/A'),
            'id': annotation.get('id')
        })
    
    # Tri des données
    table_data.sort(key=lambda x: (x['Reviewer'] == 'N/A', x['Reviewer'], datetime.strptime(x['Date'], '%Y-%m-%d') if x['Date'] != 'N/A' else datetime.min))
    
    return table_data

columns = [
    {'name': 'Image Name', 'id': 'Image Name'},
    {'name': 'Date', 'id': 'Date'},
    {'name': 'Annotateur', 'id': 'Annotateur'},
    {'name': 'Reviewer', 'id': 'Reviewer'},
    {'name': 'Review Date', 'id': 'Review Date'},
    {'name': 'Verifier', 'id': 'Verifier', 'presentation': 'markdown'}  # markdown pour Verifier
]

# Mise en page pour la page d'annotations
layout = html.Div([
    html.H1("Liste des Annotations", className='text-center my-3'),
    html.Div("Voici la liste des annotations effectuées :", className='text-center my-3'),
    
    dash_table.DataTable(
        id='annotation-table',
        columns=columns,
        data=[
            {**row, 'Verifier': f'<a href="/verifier?id={row["id"]}">Vérifier</a>'}
            for row in prepare_table_data()
        ],
        style_table={'width': '80%', 'margin': 'auto'},
        style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'},
        style_cell={'textAlign': 'left'},
        page_size=10,
    ),
    
    # Div cachée pour l'état ou la navigation
    html.Div(id='hidden-div', style={'display': 'none'}),
])

# Callback pour mettre à jour le tableau dynamiquement
@dash.callback(
    Output('annotation-table', 'data'),
    Input('annotation-table', 'data')  # Entrée factice pour déclencher la mise à jour à chaque changement
)
def update_table(_):
    """Callback pour mettre à jour le DataTable avec les dernières données d'annotation."""
    return [
            {**row, 'Verifier': 'Cliquez la cellule pour vérifier'}
        for row in prepare_table_data()
    ]

# Callback pour gérer les clics sur les liens Verifier
@dash.callback(
    Output('hidden-div', 'children'),  # Utilisation d'une div cachée pour capturer les clics sur le lien
    Input('annotation-table', 'active_cell')
)
def handle_verifier_click(active_cell):
    """Callback pour gérer les clics sur le lien Verifier."""
    if active_cell and active_cell['column_id'] == 'Verifier':
        row_index = active_cell['row']  # Obtenir l'index de la ligne de la cellule cliquée
        
        # Récupérer les données complètes du DataTable
        data = prepare_table_data()  # Vous pouvez aussi stocker ceci dans une variable globale si nécessaire
        id_value = data[row_index]['id']  # Obtenir l'id de la ligne correspondante

        return dcc.Location(href=f'/verifier?id={id_value}', id='redirect')
    return dash.no_update

```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\annoter.py`:

```py
import dash
from dash import dcc, html, Input, Output, callback, State
from skimage import io
import plotly_express as px
import os, json, random, base64
import dash_bootstrap_components as dbc
from datetime import datetime

dossier_img = './data/cars/'
users_file = './data/users.json'
annotations_file = './data/annotations.json'

def recup_img_aleatoire():
    files = os.listdir(dossier_img)
    images = [file for file in files if file.endswith(('png', 'jpg', 'jpeg'))]
    if images:
        random_image = random.choice(images)
        return os.path.join(dossier_img, random_image)
    return None

nom_image = None

def charger_image():
    chemin_image = recup_img_aleatoire()
    if chemin_image:
        global nom_image  # Utilisez la variable globale pour stocker le nom de l'image
        nom_image = os.path.basename(chemin_image)  # Récupérer uniquement le nom du fichier
        return io.imread(chemin_image)
    return None

def save_img(content, filename):
    data = content.split(",")[1]
    img_data = base64.b64decode(data)
    file_unique = f"{filename}"
    filepath = os.path.join(dossier_img, file_unique)
    with open(filepath, 'wb') as f:
        f.write(img_data)
    return filepath

dash.register_page(__name__)

img = charger_image()

if img is not None:
    fig = px.imshow(img)
    fig.update_layout(
        dragmode="drawrect",
        newshape=dict(fillcolor="cyan", opacity=0.3, line=dict(color="black", width=2)),
    )
else:
    fig = None

layout = html.Div(
    [
        html.H3("Interface d'annotation", className='text-center my-3'),
        dcc.Graph(id="graph-styled-annotations", figure=fig),
        dbc.Row(
            [
                dbc.Col(
                    dcc.Dropdown(
                        placeholder="Marque du véhicule",
                        id="marque_vehicule",
                        style={'width': '400px', 'text-align': 'center'},
                        options=[
                            {'label': 'Audi', 'value': 'Audi'},
                            {'label': 'BMW', 'value': 'BMW'},
                            {'label': 'Citroën', 'value': 'Citroen'},
                            {'label': 'Dacia', 'value': 'Dacia'},
                            {'label': 'Fiat', 'value': 'Fiat'},
                            {'label': 'Ford', 'value': 'Ford'},
                            {'label': 'Mercedes', 'value': 'Mercedes'},
                            {'label': 'Peugeot', 'value': 'Peugeot'},
                            {'label': 'Renault', 'value': 'Renault'},
                            {'label': 'Toyota', 'value': 'Toyota'},
                            {'label': 'Volkswagen', 'value': 'Volkswagen'},
                            {'label': 'Mazda', 'value': 'Mazda'},
                            {'label': 'Tesla', 'value': 'Tesla'},
                            {'label': 'Porsche', 'value': 'Porsche'},
                            {'label': 'Autre', 'value': 'Autre'},
                        ],
                    ),
                    width='auto'
                ),
                
                dbc.Col(
                    dcc.Dropdown(
                        placeholder="Couleur du véhicule",
                        id="couleur_vehicule",
                        style={'width': '400px', 'text-align': 'center'},
                        options=[
                            {'label': 'Blanc', 'value': 'Blanc'},
                            {'label': 'Noir', 'value': 'Noir'},
                            {'label': 'Bleu', 'value': 'Bleu'},
                            {'label': 'Rouge', 'value': 'Rouge'},
                            {'label': 'Vert', 'value': 'Vert'},
                            {'label': 'Jaune', 'value': 'Jaune'},
                            {'label': 'Gris', 'value': 'Gris'},
                            {'label': 'Marron', 'value': 'Marron'},
                            {'label': 'Orange', 'value': 'Orange'},
                            {'label': 'Violet', 'value': 'Violet'},
                            {'label': 'Rose', 'value': 'Rose'},
                            {'label': 'Autre', 'value': 'Autre'},
                        ],
                    ),
                    width='auto'
                ),
            ],
            justify='center',
            className='d-flex my-3',
            style={'alignItems': 'center'}
        ),
        dcc.Upload(
            id="import-image",
            children=html.Div(
                ['Glissez et déposez une image ici, ou ',
                 html.A('sélectionnez une image')],
                style={
                    'borderWidth': '0.5px', 'borderStyle': 'solid', 'backgroundColor':'rgba(66, 66, 66, 0.15)',
                    'padding': '20px', 'textAlign': 'center', 'width': '50%',
                    'margin': '5px auto', 'cursor': 'pointer',
                    'font-family': 'Roboto, sans-serif',
                }
            ),
            multiple=False
        ),

        dbc.Modal(
            [
                dbc.ModalHeader("Confirmation de l'importation"),
                dbc.ModalBody("Voulez-vous confirmer l'importation de ce fichier ?"),
                dbc.ModalFooter(
                    [
                        dbc.Button("Oui", id="confirmer_modal", color="success"),
                        dbc.Button("Non", id="fermer_modal", color="danger", className="ms-2"),
                    ]
                ),
            ],
            id="modal",
            is_open=False,
        ),
        dbc.Row(
            [
                dbc.Col(
                    dbc.Button(
                        "Valider l'annotation",
                        id="bouton_valider",
                        color='success',
                        n_clicks=0,
                    ),
                    width='auto'
                ),
                
                dbc.Col(
                    dbc.Button(
                        "Annuler l'annotation",
                        id="bouton_reset",
                        color='danger',
                        n_clicks=0,
                    ),
                    width='auto'
                ),
            ],
            justify='center',
            className='my-3',
        ),
        html.Pre(id="annotation_data", className='my-3'),
        dcc.Store(id='user_name_store', storage_type='local'), # Pour stocker le nom d'utilisateur en cours sur la session
        dcc.Store(id='current_image_store', storage_type='local'), # Pour stocker l'image actuelle

    ]
)

@callback(
    Output('modal', 'is_open'), # Ouvrir ou fermer le modal
    Output('graph-styled-annotations', 'figure', allow_duplicate=True), # Mettre à jour l'image affichée
    Input('import-image', 'contents'),
    Input('fermer_modal', 'n_clicks'),
    Input('confirmer_modal', 'n_clicks'),
    State('modal', 'is_open'),
    State('import-image', 'filename'),
    State('graph-styled-annotations', 'figure'),
    prevent_initial_call=True
)

def activer_modal(contenu_img, cancel_clicks, confirm_clicks, is_open, filename, current_fig):
    # Ouvrir le modal lorsque l'image est importée
    if contenu_img is not None and is_open is False:
        return True, current_fig
    
    # Si "Non" est cliqué, fermer le modal sans rien faire
    if cancel_clicks:
        return False, current_fig
    
    # Si "Oui" est cliqué, sauvegarder l'image
    if confirm_clicks:
        save_img(contenu_img, filename)
        
        # Charger l'image sauvegardée pour l'afficher
        img = io.imread(os.path.join(dossier_img, filename))
        fig = px.imshow(img)
        fig.update_layout(
            dragmode="drawrect",
            newshape=dict(fillcolor="cyan", opacity=0.3, line=dict(color="black", width=2)),
        )
        return False, fig
    
    # Si aucune action n'a été prise, ne rien changer
    return is_open, current_fig

@callback(
    Output('annotation_data', 'children'),
    Output('graph-styled-annotations', 'figure'),
    Output('bouton_valider', 'disabled', allow_duplicate=True),
    Input("bouton_valider", "n_clicks"),
    State('graph-styled-annotations', 'relayoutData'),
    State('user_name_store', 'data'),
    State('marque_vehicule', 'value'),
    State('couleur_vehicule', 'value'),
    prevent_initial_call='initial_duplicate'
)

def afficher_annotation(n_clicks, relayoutData, user_name, marque, couleur):
    if n_clicks is None and user_name :
        return dash.no_update, dash.no_update, True
        # Vérifier si des annotations existent
    if relayoutData is not None and 'shapes' in relayoutData and relayoutData['shapes']:
        try :

            # Charger les annotations précédentes
            annotations_data = []
            if os.path.exists(annotations_file):
                with open(annotations_file, 'r') as f:
                    annotations_data = json.load(f)

            # Modifier le fichier json annotation avec le nom de l'annotateur
            new_annotation = {
                'id': len(annotations_data) + 1,
                'nom_image': nom_image,
                'annotateur': user_name,
                'date_annotation': datetime.now().strftime('%Y-%m-%d'),
                'reviewer': '',
                'date_review': '',
                'marque': marque,
                'couleur': couleur,
                'annotations': relayoutData['shapes']
            }

            # Ajouter les nouvelles annotations
            annotations_data.append(new_annotation)

            # Sauvegarder les annotations dans un fichier JSON
            with open(annotations_file, 'w') as f:
                json.dump(annotations_data, f, indent=2)

            # Message de confirmation
            message = f"L'annotation réalisée par {user_name} sur l'image {nom_image} a bien été enregistrée."
            
            # Passer à l'image suivante
            img = charger_image()
            if img is not None:
                fig = px.imshow(img)
                fig.update_layout(
                    dragmode="drawrect",
                    newshape=dict(fillcolor="cyan", opacity=0.3, line=dict(color="black", width=2)),
                )
            else:
                fig = None

            return html.Div(message, className='text-center', style={'font-family': 'Roboto, sans-serif'}), fig, True
    
        except Exception as e:
            # Message d'erreur si une exception est levée
            return html.Div("L'annotation a échoué, veuillez réessayer.", style={'font-family': 'Roboto, sans-serif'}), dash.no_update, True

    return html.Div("Veuillez réaliser une annotation avant de valider", className='text-center', style={'font-family': 'Roboto, sans-serif'}), dash.no_update, False

@callback(
    Output('bouton_valider', 'disabled'),
    Input('graph-styled-annotations', 'relayoutData'),
)

def activer_bouton(relayoutData):
    if relayoutData is not None and 'shapes' in relayoutData and relayoutData['shapes']:
        return False
    return True

@callback(
    Output('graph-styled-annotations', 'figure', allow_duplicate=True),
    Input('bouton_reset', 'n_clicks'),
    State('graph-styled-annotations', 'relayoutData'),
    prevent_initial_call=True
)

def reset_annotation(n_clicks, relayoutData):
    if n_clicks > 0:
        # Si des annotations existent, les supprimer
        if relayoutData is not None and 'shapes' in relayoutData:
            relayoutData['shapes'] = [] 

        # Recréer la figure sans annotations
        img = io.imread(os.path.join(dossier_img, nom_image))  # Recharger l'image actuelle
        fig = px.imshow(img)
        fig.update_layout(
            dragmode="drawrect",
            newshape=dict(fillcolor="cyan", opacity=0.3, line=dict(color="black", width=2)),
            shapes=relayoutData.get('shapes', []),
        )
        return fig
    return dash.no_update
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\apropos.py`:

```py
from dash import html, dcc
import dash
import dash_bootstrap_components as dbc

# Enregistrer la page dans le registre avec le décorateur
dash.register_page(__name__, path='/apropos', name='A propos', order=5)

layout = html.Div(
    style={'margin': '20px'},
    children=[
        # Titre
        html.H1("À propos de nous", style={'text-align': 'center', 'margin-bottom': '30px'}),

        # Description de l'équipe
        html.H4("Qui sommes-nous ?", className="mt-4"),
        html.P(
            [
                "Quatre étudiants en 3ème année de ",
                html.A("BUT Science des Données", href="https://iutp.univ-poitiers.fr/sd/", className="text-primary"),
                " qui ont uni leurs forces pour réaliser ce projet, à l'occasion du cours de Dash dispensé par Clément GARCIN.",
            ],
            className="mb-4"
        ),

        # Présentation de l'équipe
        dbc.Row(
            [
                dbc.Col(
                    dbc.Card(
                        [
                            html.A(
                                dbc.CardImg(src="https://static.wikia.nocookie.net/worldofcarsdrivein/images/1/1e/Chick_Hicks.png", top=True, style={"height": "150px", "object-fit": "contain"}),
                                href="https://www.linkedin.com/in/vadim-martin/",
                                target="_blank"
                            ),
                            dbc.CardBody(
                                [
                                    html.H5("Vadim MARTIN", className="card-title", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                    html.P("L'atout moustachu de l'annotation !", className="card-text", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                ]
                            )
                        ],
                        className="mb-2"  # Réduire la marge inférieure des cartes
                    ),
                    width=3
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            html.A(
                                dbc.CardImg(src="https://static.wikia.nocookie.net/worldofcarsdrivein/images/9/96/The_king.png", top=True, style={"height": "150px", "object-fit": "contain"}),
                                href="https://www.linkedin.com/in/ma%C3%ABl-chaine-0996422a3/",
                                target="_blank"
                            ),
                            dbc.CardBody(
                                [
                                    html.H5("Maël CHAINE", className="card-title", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                    html.P("Le spécialiste musclé de la validation !", className="card-text", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                ]
                            )
                        ],
                        className="mb-2"  # Réduire la marge inférieure des cartes
                    ),
                    width=3
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            html.A(
                                dbc.CardImg(src="https://static.wikia.nocookie.net/worldofcarsdrivein/images/d/dd/Doc_Hudson.png", top=True, style={"height": "150px", "object-fit": "contain"}),
                                href="https://fr.linkedin.com/in/daguint",
                                target="_blank"
                            ),
                            dbc.CardBody(
                                [
                                    html.H5("Thibault DAGUIN", className="card-title", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                    html.P("Le vieux sage des statistiques !", className="card-text", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                ]
                            )
                        ],
                        className="mb-2"  # Réduire la marge inférieure des cartes
                    ),
                    width=3
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            html.A(
                                dbc.CardImg(src="https://static.wikia.nocookie.net/worldofcarsdrivein/images/7/79/Cars3sally.png", top=True, style={"height": "150px", "object-fit": "contain"}),
                                href="https://www.linkedin.com/in/manon-bonnaud-dubois-280266252/",
                                target="_blank"
                            ),
                            
                            dbc.CardBody(
                                [
                                    html.H5("Manon BONNAUD-DUBOIS", className="card-title", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                    html.P("L'habile débloqueuse de situations !", className="card-text", style={"white-space": "nowrap", "overflow": "hidden", "text-overflow": "ellipsis"}),
                                ]
                            )
                        ],
                        className="mb-2"  # Réduire la marge inférieure des cartes
                    ),
                    width=3
                ),
            ],
            justify="center"
        ),

        # Exemple d'application
        html.H4("Le projet «Dash McQueen» : Un outil d'annotation d'images automobiles simple et performant", className="mt-2"),  # Réduire la marge supérieure du titre suivant
        html.P(
            """
            Notre application se concentre sur l'annotation d'images de voitures. L'objectif est d'identifier 
            précisément où se situe la voiture sur chaque image, afin de créer un ensemble de données annotées 
            qui pourra être utilisé pour entraîner des modèles de détection d'objets. Ces annotations permettront 
            d'améliorer la précision des modèles dans la reconnaissance de voitures sur d'autres images.
            """,
            className="mb-4"
        ),

        # Footer ou informations supplémentaires
        html.Hr(),
        dbc.Row(
            [
                dbc.Col(
                    html.A(
                        html.Img(src="https://www.univ-poitiers.fr/wp-content/uploads/sites/10/2021/10/logo-up.svg", style={"margin": "10px"}, height="80px"),
                        href="https://www.univ-poitiers.fr"
                    ),
                    width="auto"
                ),
                dbc.Col(
                    html.A(
                        html.Img(src="https://iutp.univ-poitiers.fr/sd/wp-content/uploads/sites/137/2023/09/xLogo-SD-Niort-300x300.png.pagespeed.ic.pfiWeXH-r5.webp", style={"margin": "10px", "height": "80px"}),
                        href="https://iutp.univ-poitiers.fr/sd/"
                    ),
                    width="auto"
                ),
                dbc.Col(
                    html.A(
                        html.Img(src="https://www.dash-extensions.com/assets/dash_logo.png", style={"margin": "10px", "height": "80px"}),
                        href="https://www.dash-extensions.com/"
                    ),
                    width="auto"
                ),
            ],
            justify="center",
            className="mb-2"  # Utilisez une classe Bootstrap pour réduire la marge inférieure
        ),
    ]
)
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\login.py`:

```py
import dash
from dash import dcc, html, Input, Output, callback, State
import dash_bootstrap_components as dbc
import json
import os

dash.register_page(__name__, path='/') # '/' sert à faire la page d'accueil

# Liste des annotateurs déjà connus
data_users = './data/users.json'

def load_users():
    if os.path.exists(data_users):
        with open(data_users, 'r', encoding='utf-8') as file:
            return json.load(file)
    return []

# Fonction pour sauvegarder les utilisateurs
def save_users(users):
    with open(data_users, 'w', encoding='utf-8') as file:
        json.dump(users, file, indent=4)

users = load_users()

def generate_user_id():
    if users:
        return max(user['id'] for user in users) + 1
    return 1

layout = dbc.Container(
        [
            

            dbc.Row(
                dbc.Col(
                    html.H1("Bienvenue sur l'interface d'annotation du groupe Dash McQueen", className="text-center mt-5")
                )
            ),
            dbc.Row(
                [
                    dbc.Col(
                        dbc.Card(
                            [
                                dbc.CardHeader("Identifiez-vous"),
                                dbc.CardBody(
                                    [
                                        html.H5("Sélectionnez un utilisateur ou ajoutez-en un nouveau", className="card-title"),
                                        dcc.Dropdown(id='user_dropdown', 
                                                     options=[{'label': user['name'], 'value': user['id']} for user in users],
                                                     placeholder="Sélectionnez votre nom",
                                                     className="mb-3"),
                                        dbc.Input(id='new_user', type='text', 
                                                  placeholder='Ou entrez un nouveau nom..',
                                                  className="mb-3"),
                                        dbc.Button('Se connecter', id='start_button', color='primary', 
                                                   n_clicks=0, className='d-grid gap-2 col-6 mx-auto'), # Centrage du bouton grâce à la grille CSS
                                        html.Div(id='user_message', className='mt-3'),
                                        html.Div(className="mt-3") # Ajout d'un peu d'espace en bas de la card
                                    ]
                                )
                            ],
                            className="shadow-lg p-3 mb-2 bg-white rounded" # Ombrage + Marge Basse + Bord rond blanc
                        ),
                        width=6, # Centrer au milieu de la page
                        className="offset-md-3"  # Centre la colonne dans la page
                    )
                ],
                className="mt-5"
            ),
            dbc.Row(
                dbc.Col(
                    html.Footer([
                        dcc.Markdown("""
                            **© 2024 Projet d'annotation - Dash**
                                     
                            Contributeurs du projet : Thibault DAGUIN, Vadim MARTIN, Maël CHAINE, Manon BONNAUD-DUBOIS
                            """)
                    ],
                        className="text-center mt-5"
                    )
                )
            ),
            dcc.Store(id='user_name_store', storage_type='local'),  # Pour stocker le nom d'utilisateur en cours sur la session
        ],
        fluid=False
    )

@callback(
    Output('user_dropdown', 'options'),
    Input('user_dropdown', 'value'),
)

def update_user_dropdown(selected_user):
    # Mettre à jour la liste des utilisateurs
    users = load_users()
    return [{'label': user['name'], 'value': user['id']} for user in users]

@callback(
    Output('user_message', 'children'), # Message de connexion
    Output('user_name_store', 'data'), # Stocker le nom d'utilisateur
    Output('url', 'href'), # Redirection vers la page d'accueil
    Input('start_button', 'n_clicks'), # Clic sur le bouton de connexion
    State('new_user', 'value'), # Valeur du nouvel utilisateur
    State('user_dropdown', 'value') # Valeur de l'utilisateur sélectionné
)

def gestion_connexion(n_clicks, new_user, selected_user):
    # Gère la connexion d'un utilisateur ou d'un nouvel utilisateur
    if n_clicks > 0:
        if new_user:
            return add_new_user(new_user)
        
        if selected_user:
            return select_existing_user(selected_user)
    
    return not_connected(), None, dash.no_update

def add_new_user(new_user):
    # Ajoute un nouvel utilisateur
    users = load_users()

    # Vérifier si l'utilisateur existe déjà
    if any(user['name'] == new_user for user in users):
        return "L'utilisateur existe déjà.", None, dash.no_update
    
    # Ajouter le nouvel utilisateur
    new_user_id = generate_user_id()
    new_user_data = {
        'id': new_user_id,
        'name': new_user
        }
    users.append(new_user_data)
    save_users(users)

    return f"Nouvel utilisateur {new_user_data['name']} ajouté.", new_user_data['name'], '/accueil'

def select_existing_user(selected_user):
    # Retourne les infos d'un utilisateur existant
    users = load_users()
    user_name = next((user['name'] for user in users if user['id'] == selected_user), None)
    return f"Vous êtes loggé en tant que {user_name}.", user_name, '/accueil'

def not_connected():
    # Retourne un message si l'utilisateur n'est pas connecté
    return html.Div([
        html.I(className="fas fa-exclamation-circle text-danger me-2"),  # Icône d'exclamation rouge
        "Vous n'êtes pas loggé."
    ], className='d-flex align-items-center')

def afficher_message_loggé():
    # Affiche un message si l'utilisateur est connecté
    return html.Div(id='user_status', className='text-right mt-2')

```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\stats.py`:

```py
# -*- coding: utf-8 -*-

from dash import dcc, html, Input, Output
import dash
import pandas as pd
import json
import plotly.express as px

# Enregistrer la page dans le registre avec le decorateur
dash.register_page(__name__, path='/stats', name='Stats', order=4)

# Charger les donnees CSV
try:
    df = pd.read_csv('data/data_fictive.csv', sep=';', encoding='utf-8')
except Exception as e:
    print(f"Erreur lors du chargement du CSV : {e}")
    df = pd.read_csv('data/data_fictive.csv', sep=';', encoding='ISO-8859-1')

# Charger les utilisateurs a partir du fichier JSON
try:
    with open('data/users.json', 'r', encoding='utf-8') as f:
        users = json.load(f)
except Exception as e:
    print(f"Erreur lors du chargement du fichier JSON : {e}")
    users = []

# Convertir les utilisateurs en DataFrame si necessaire
users_df = pd.DataFrame(users)

# Fonctions utilitaires
def count_non_empty(series):
    return series.notna().sum()

def create_distribution_chart(data, title):
    # Reinitialiser l'index pour obtenir un DataFrame avec des colonnes
    data_df = data.reset_index()
    data_df.columns = ['index', 'count']  # Renommer les colonnes pour le graphique
    fig = px.pie(data_frame=data_df, names='index', values='count', title=title)
    return dcc.Graph(figure=fig)

# Composants pour les statistiques globales
def global_stats():
    return html.Div([
        html.H4("Statistiques Globales"),
        html.Div([
            html.P(f"Nombre d'annotations: {len(df)}"),
            html.P(f"Nombre de validations: {count_non_empty(df['Reviewer'])}"),
        ], className="stats-summary"),
        create_distribution_chart(df['User'].value_counts(), "Repartition des utilisateurs"),
        create_distribution_chart(df['Reviewer'].value_counts(), "Repartition des validateurs"),
        create_distribution_chart(df['Couleur'].value_counts(), "Repartition des couleurs"),
        create_distribution_chart(df['Marque'].value_counts(), "Repartition des marques"),
    ])

# Composants pour les statistiques personnelles
def personal_stats():
    return html.Div([
        html.H4("Statistiques Personnelles"),
        dcc.Dropdown(
            id='user-dropdown',
            options=[{'label': user['name'], 'value': user['name']} for user in users],
            value=users[0]['name'] if users else None,
            className="dropdown"
        ),
        html.Div(id='personal-stats-content')
    ])

# Callback pour mettre a jour les statistiques personnelles
@dash.callback(
    Output('personal-stats-content', 'children'),
    Input('user-dropdown', 'value')
)
def update_personal_stats(selected_user):
    if selected_user is None:
        return html.Div("Veuillez selectionner un utilisateur.")

    user_df = df[df['User'] == selected_user]
    return html.Div([
        html.Div([
            html.P(f"Nombre d'annotations: {len(user_df)}"),
            html.P(f"Nombre de validations: {count_non_empty(user_df['Reviewer'])}"),
        ], className="stats-summary"),
        create_distribution_chart(user_df['Couleur'].value_counts(), f"Repartition des couleurs pour {selected_user}"),
        create_distribution_chart(user_df['Marque'].value_counts(), f"Repartition des marques pour {selected_user}"),
    ])

# Layout principal
layout = html.Div([
    html.H3("Statistiques"),
    dcc.Tabs([
        dcc.Tab(label="Stats Globales", children=[global_stats()]),
        dcc.Tab(label="Stats Personnelles", children=[personal_stats()])
    ], className="custom-tabs")
])
```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\pages\verifier.py`:

```py
import dash
from dash import dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
import plotly.express as px
from skimage import io
import os
import json
from urllib.parse import urlparse, parse_qs
from datetime import datetime

dash.register_page(__name__, path_template="/verifier")

# Chemins des fichiers
dossier_img = './data/cars/'
annotations_file = './data/annotations.json'

# Fonction pour charger une annotation par ID
def get_annotation_by_id(annotation_id):
    if os.path.exists(annotations_file):
        with open(annotations_file, 'r') as f:
            annotations = json.load(f)
            for annotation in annotations:
                if str(annotation['id']) == str(annotation_id):  # S'assurer que l'ID est comparé en tant que chaîne
                    return annotation
    return None

# Fonction pour charger une image par nom
def load_image(image_name):
    img_path = os.path.join(dossier_img, image_name)
    if os.path.exists(img_path):
        return io.imread(img_path)
    else:
        print(f"Image {image_name} non trouvée au chemin {img_path}")
        return None

# Mise en page pour la page de vérification
layout = html.Div([
    html.H3("Vérifier l'Annotation", className='text-center my-3'),
    dcc.Graph(id='annotation-graph'),
    
    # Centrer les boutons en utilisant une ligne Bootstrap
    dbc.Row(
        [
            dbc.Col(
                dbc.Button("Valider l'annotation", id="valider-button", color="success", n_clicks=0),
                width="auto"
            ),
            dbc.Col(
                dbc.Button("Supprimer l'annotation", id="supprimer-button", color="danger", n_clicks=0),
                width="auto"
            )
        ],
        justify="center",  # Centrer les boutons
        className="my-3"  # Ajouter une marge verticale
    ),
    
    html.Div(id="action-message"),
    dcc.Location(id="redirect", refresh=True)
])

# Callback pour afficher l'image avec les annotations
@dash.callback(
    Output('annotation-graph', 'figure'),
    Input('url', 'href')
)
def display_image_with_annotations(href):
    if href:
        # Analyser l'URL pour extraire l'ID de l'annotation
        parsed_url = urlparse(href)
        params = parse_qs(parsed_url.query)
        annotation_id = params.get('id', [None])[0]

        if annotation_id:
            # Obtenir les données d'annotation par ID
            annotation = get_annotation_by_id(annotation_id)
            if annotation:
                # Charger l'image correspondante
                image = load_image(annotation['nom_image'])  # Changer 'image_name' en 'nom_image'
                if image is not None:
                    fig = px.imshow(image)

                    # Parcourir chaque forme d'annotation et l'ajouter à la figure
                    for ann in annotation['annotations']:
                        fig.add_shape(
                            type=ann['type'],
                            x0=ann['x0'],
                            y0=ann['y0'],
                            x1=ann['x1'],
                            y1=ann['y1'],
                            line=dict(
                                color=ann['line']['color'],
                                width=ann['line']['width'],
                                dash=ann['line']['dash']
                            ),
                            fillcolor=ann['fillcolor'],
                            opacity=ann['opacity']
                        )

                    return fig
    return {}

# Callback combiné pour gérer les clics sur les boutons "Valider" et "Supprimer"
@dash.callback(
    [Output('action-message', 'children'), Output('redirect', 'href')],
    [Input('valider-button', 'n_clicks'), Input('supprimer-button', 'n_clicks')],
    State('url', 'href'),
    State('user_name_store', 'data'),
    prevent_initial_call=True
)
def handle_buttons(valider_clicks, supprimer_clicks, href, user_name):
    # Déterminer quel bouton a été cliqué
    ctx = dash.callback_context

    if not ctx.triggered:
        return dash.no_update, dash.no_update

    # Analyser l'URL pour extraire l'ID de l'annotation
    parsed_url = urlparse(href)
    params = parse_qs(parsed_url.query)
    annotation_id = params.get('id', [None])[0]

    # Gérer le clic sur le bouton "Valider"
    if ctx.triggered[0]['prop_id'] == 'valider-button.n_clicks' and user_name:
        if annotation_id:
            # Charger l'annotation et mettre à jour le reviewer et la date de révision
            if os.path.exists(annotations_file):
                with open(annotations_file, 'r') as f:
                    annotations = json.load(f)

                for annotation in annotations:
                    if str(annotation['id']) == str(annotation_id):  # S'assurer que la comparaison de l'ID est correcte
                        # Mettre à jour le champ reviewer
                        annotation['reviewer'] = user_name
                        # Ajouter la date de révision au format AAAA-MM-JJ
                        annotation['date_review'] = datetime.now().strftime('%Y-%m-%d')  # Changer en 'date_review'
                        break

                # Enregistrer les annotations mises à jour
                with open(annotations_file, 'w') as f:
                    json.dump(annotations, f, indent=2)

                # Rediriger vers la page des annotations
                return f"L'annotation a bien été validée par {user_name}.", '/annotation'

    # Gérer le clic sur le bouton "Supprimer"
    if ctx.triggered[0]['prop_id'] == 'supprimer-button.n_clicks':
        if annotation_id:
            # Charger les annotations et supprimer celle spécifiée
            if os.path.exists(annotations_file):
                with open(annotations_file, 'r') as f:
                    annotations = json.load(f)

                # Filtrer l'annotation avec l'ID correspondant
                annotations = [ann for ann in annotations if str(ann['id']) != str(annotation_id)]

                # Enregistrer les annotations mises à jour
                with open(annotations_file, 'w') as f:
                    json.dump(annotations, f, indent=2)

                # Rediriger vers la page des annotations
                return f"L'annotation {annotation_id} a été supprimée.", '/annotation'

    return "Une erreur s'est produite lors de la validation.", dash.no_update

```

`\\?\J:\BUT SD\S5\Dash\Projet_Dash\requirements.txt`:

```txt
dash==2.11.0
dash-bootstrap-components
plotly
scikit-image==0.20.0
Pillow==9.5.0
scikit-image
plotly_express
numpy
```